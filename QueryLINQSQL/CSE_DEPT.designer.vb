'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CSE_DEPT")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLogIn(instance As LogIn)
    End Sub
  Partial Private Sub UpdateLogIn(instance As LogIn)
    End Sub
  Partial Private Sub DeleteLogIn(instance As LogIn)
    End Sub
  Partial Private Sub InsertCourse(instance As Course)
    End Sub
  Partial Private Sub UpdateCourse(instance As Course)
    End Sub
  Partial Private Sub DeleteCourse(instance As Course)
    End Sub
  Partial Private Sub InsertFaculty(instance As Faculty)
    End Sub
  Partial Private Sub UpdateFaculty(instance As Faculty)
    End Sub
  Partial Private Sub DeleteFaculty(instance As Faculty)
    End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.QueryLINQSQL.My.MySettings.Default.CSE_DEPTConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property LogIns() As System.Data.Linq.Table(Of LogIn)
		Get
			Return Me.GetTable(Of LogIn)
		End Get
	End Property
	
	Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
		Get
			Return Me.GetTable(Of Course)
		End Get
	End Property
	
	Public ReadOnly Property Faculties() As System.Data.Linq.Table(Of Faculty)
		Get
			Return Me.GetTable(Of Faculty)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property StudentCourses() As System.Data.Linq.Table(Of StudentCourse)
		Get
			Return Me.GetTable(Of StudentCourse)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LogIn")>  _
Partial Public Class LogIn
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _user_name As String
	
	Private _pass_word As String
	
	Private _faculty_id As String
	
	Private _student_id As String
	
	Private _Faculty As EntityRef(Of Faculty)
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onuser_nameChanging(value As String)
    End Sub
    Partial Private Sub Onuser_nameChanged()
    End Sub
    Partial Private Sub Onpass_wordChanging(value As String)
    End Sub
    Partial Private Sub Onpass_wordChanged()
    End Sub
    Partial Private Sub Onfaculty_idChanging(value As String)
    End Sub
    Partial Private Sub Onfaculty_idChanged()
    End Sub
    Partial Private Sub Onstudent_idChanging(value As String)
    End Sub
    Partial Private Sub Onstudent_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Faculty = CType(Nothing, EntityRef(Of Faculty))
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_user_name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property user_name() As String
		Get
			Return Me._user_name
		End Get
		Set
			If (String.Equals(Me._user_name, value) = false) Then
				Me.Onuser_nameChanging(value)
				Me.SendPropertyChanging
				Me._user_name = value
				Me.SendPropertyChanged("user_name")
				Me.Onuser_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pass_word", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property pass_word() As String
		Get
			Return Me._pass_word
		End Get
		Set
			If (String.Equals(Me._pass_word, value) = false) Then
				Me.Onpass_wordChanging(value)
				Me.SendPropertyChanging
				Me._pass_word = value
				Me.SendPropertyChanged("pass_word")
				Me.Onpass_wordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_faculty_id", DbType:="NVarChar(50)")>  _
	Public Property faculty_id() As String
		Get
			Return Me._faculty_id
		End Get
		Set
			If (String.Equals(Me._faculty_id, value) = false) Then
				If Me._Faculty.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onfaculty_idChanging(value)
				Me.SendPropertyChanging
				Me._faculty_id = value
				Me.SendPropertyChanged("faculty_id")
				Me.Onfaculty_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_student_id", DbType:="NVarChar(50)")>  _
	Public Property student_id() As String
		Get
			Return Me._student_id
		End Get
		Set
			If (String.Equals(Me._student_id, value) = false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onstudent_idChanging(value)
				Me.SendPropertyChanging
				Me._student_id = value
				Me.SendPropertyChanged("student_id")
				Me.Onstudent_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Faculty_LogIn", Storage:="_Faculty", ThisKey:="faculty_id", OtherKey:="faculty_id", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Faculty() As Faculty
		Get
			Return Me._Faculty.Entity
		End Get
		Set
			Dim previousValue As Faculty = Me._Faculty.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Faculty.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Faculty.Entity = Nothing
					previousValue.LogIns.Remove(Me)
				End If
				Me._Faculty.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogIns.Add(Me)
					Me._faculty_id = value.faculty_id
				Else
					Me._faculty_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Faculty")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_LogIn", Storage:="_Student", ThisKey:="student_id", OtherKey:="student_id", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.LogIns.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LogIns.Add(Me)
					Me._student_id = value.student_id
				Else
					Me._student_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Course")>  _
Partial Public Class Course
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _course_id As String
	
	Private _course As String
	
	Private _credit As System.Nullable(Of Short)
	
	Private _classroom As String
	
	Private _schedule As String
	
	Private _enrollment As System.Nullable(Of Integer)
	
	Private _faculty_id As String
	
	Private _Faculty As EntityRef(Of Faculty)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncourse_idChanging(value As String)
    End Sub
    Partial Private Sub Oncourse_idChanged()
    End Sub
    Partial Private Sub OncourseChanging(value As String)
    End Sub
    Partial Private Sub OncourseChanged()
    End Sub
    Partial Private Sub OncreditChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OncreditChanged()
    End Sub
    Partial Private Sub OnclassroomChanging(value As String)
    End Sub
    Partial Private Sub OnclassroomChanged()
    End Sub
    Partial Private Sub OnscheduleChanging(value As String)
    End Sub
    Partial Private Sub OnscheduleChanged()
    End Sub
    Partial Private Sub OnenrollmentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnenrollmentChanged()
    End Sub
    Partial Private Sub Onfaculty_idChanging(value As String)
    End Sub
    Partial Private Sub Onfaculty_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Faculty = CType(Nothing, EntityRef(Of Faculty))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_course_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property course_id() As String
		Get
			Return Me._course_id
		End Get
		Set
			If (String.Equals(Me._course_id, value) = false) Then
				Me.Oncourse_idChanging(value)
				Me.SendPropertyChanging
				Me._course_id = value
				Me.SendPropertyChanged("course_id")
				Me.Oncourse_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_course", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property course() As String
		Get
			Return Me._course
		End Get
		Set
			If (String.Equals(Me._course, value) = false) Then
				Me.OncourseChanging(value)
				Me.SendPropertyChanging
				Me._course = value
				Me.SendPropertyChanged("course")
				Me.OncourseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credit", DbType:="SmallInt")>  _
	Public Property credit() As System.Nullable(Of Short)
		Get
			Return Me._credit
		End Get
		Set
			If (Me._credit.Equals(value) = false) Then
				Me.OncreditChanging(value)
				Me.SendPropertyChanging
				Me._credit = value
				Me.SendPropertyChanged("credit")
				Me.OncreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_classroom", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property classroom() As String
		Get
			Return Me._classroom
		End Get
		Set
			If (String.Equals(Me._classroom, value) = false) Then
				Me.OnclassroomChanging(value)
				Me.SendPropertyChanging
				Me._classroom = value
				Me.SendPropertyChanged("classroom")
				Me.OnclassroomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schedule", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property schedule() As String
		Get
			Return Me._schedule
		End Get
		Set
			If (String.Equals(Me._schedule, value) = false) Then
				Me.OnscheduleChanging(value)
				Me.SendPropertyChanging
				Me._schedule = value
				Me.SendPropertyChanged("schedule")
				Me.OnscheduleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_enrollment", DbType:="Int")>  _
	Public Property enrollment() As System.Nullable(Of Integer)
		Get
			Return Me._enrollment
		End Get
		Set
			If (Me._enrollment.Equals(value) = false) Then
				Me.OnenrollmentChanging(value)
				Me.SendPropertyChanging
				Me._enrollment = value
				Me.SendPropertyChanged("enrollment")
				Me.OnenrollmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_faculty_id", DbType:="NVarChar(50)")>  _
	Public Property faculty_id() As String
		Get
			Return Me._faculty_id
		End Get
		Set
			If (String.Equals(Me._faculty_id, value) = false) Then
				If Me._Faculty.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onfaculty_idChanging(value)
				Me.SendPropertyChanging
				Me._faculty_id = value
				Me.SendPropertyChanged("faculty_id")
				Me.Onfaculty_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Faculty_Course", Storage:="_Faculty", ThisKey:="faculty_id", OtherKey:="faculty_id", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Faculty() As Faculty
		Get
			Return Me._Faculty.Entity
		End Get
		Set
			Dim previousValue As Faculty = Me._Faculty.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Faculty.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Faculty.Entity = Nothing
					previousValue.Courses.Remove(Me)
				End If
				Me._Faculty.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Courses.Add(Me)
					Me._faculty_id = value.faculty_id
				Else
					Me._faculty_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Faculty")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Faculty")>  _
Partial Public Class Faculty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _faculty_id As String
	
	Private _faculty_name As String
	
	Private _office As String
	
	Private _phone As String
	
	Private _college As String
	
	Private _title As String
	
	Private _email As String
	
	Private _LogIns As EntitySet(Of LogIn)
	
	Private _Courses As EntitySet(Of Course)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onfaculty_idChanging(value As String)
    End Sub
    Partial Private Sub Onfaculty_idChanged()
    End Sub
    Partial Private Sub Onfaculty_nameChanging(value As String)
    End Sub
    Partial Private Sub Onfaculty_nameChanged()
    End Sub
    Partial Private Sub OnofficeChanging(value As String)
    End Sub
    Partial Private Sub OnofficeChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OncollegeChanging(value As String)
    End Sub
    Partial Private Sub OncollegeChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogIns = New EntitySet(Of LogIn)(AddressOf Me.attach_LogIns, AddressOf Me.detach_LogIns)
		Me._Courses = New EntitySet(Of Course)(AddressOf Me.attach_Courses, AddressOf Me.detach_Courses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_faculty_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property faculty_id() As String
		Get
			Return Me._faculty_id
		End Get
		Set
			If (String.Equals(Me._faculty_id, value) = false) Then
				Me.Onfaculty_idChanging(value)
				Me.SendPropertyChanging
				Me._faculty_id = value
				Me.SendPropertyChanged("faculty_id")
				Me.Onfaculty_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_faculty_name", DbType:="NVarChar(50)")>  _
	Public Property faculty_name() As String
		Get
			Return Me._faculty_name
		End Get
		Set
			If (String.Equals(Me._faculty_name, value) = false) Then
				Me.Onfaculty_nameChanging(value)
				Me.SendPropertyChanging
				Me._faculty_name = value
				Me.SendPropertyChanged("faculty_name")
				Me.Onfaculty_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_office", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property office() As String
		Get
			Return Me._office
		End Get
		Set
			If (String.Equals(Me._office, value) = false) Then
				Me.OnofficeChanging(value)
				Me.SendPropertyChanging
				Me._office = value
				Me.SendPropertyChanged("office")
				Me.OnofficeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_college", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property college() As String
		Get
			Return Me._college
		End Get
		Set
			If (String.Equals(Me._college, value) = false) Then
				Me.OncollegeChanging(value)
				Me.SendPropertyChanging
				Me._college = value
				Me.SendPropertyChanged("college")
				Me.OncollegeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Faculty_LogIn", Storage:="_LogIns", ThisKey:="faculty_id", OtherKey:="faculty_id")>  _
	Public Property LogIns() As EntitySet(Of LogIn)
		Get
			Return Me._LogIns
		End Get
		Set
			Me._LogIns.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Faculty_Course", Storage:="_Courses", ThisKey:="faculty_id", OtherKey:="faculty_id")>  _
	Public Property Courses() As EntitySet(Of Course)
		Get
			Return Me._Courses
		End Get
		Set
			Me._Courses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LogIns(ByVal entity As LogIn)
		Me.SendPropertyChanging
		entity.Faculty = Me
	End Sub
	
	Private Sub detach_LogIns(ByVal entity As LogIn)
		Me.SendPropertyChanging
		entity.Faculty = Nothing
	End Sub
	
	Private Sub attach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Faculty = Me
	End Sub
	
	Private Sub detach_Courses(ByVal entity As Course)
		Me.SendPropertyChanging
		entity.Faculty = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _student_id As String
	
	Private _student_name As String
	
	Private _gpa As System.Nullable(Of Double)
	
	Private _credits As System.Nullable(Of Integer)
	
	Private _major As String
	
	Private _schoolYear As String
	
	Private _email As String
	
	Private _LogIns As EntitySet(Of LogIn)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onstudent_idChanging(value As String)
    End Sub
    Partial Private Sub Onstudent_idChanged()
    End Sub
    Partial Private Sub Onstudent_nameChanging(value As String)
    End Sub
    Partial Private Sub Onstudent_nameChanged()
    End Sub
    Partial Private Sub OngpaChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OngpaChanged()
    End Sub
    Partial Private Sub OncreditsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncreditsChanged()
    End Sub
    Partial Private Sub OnmajorChanging(value As String)
    End Sub
    Partial Private Sub OnmajorChanged()
    End Sub
    Partial Private Sub OnschoolYearChanging(value As String)
    End Sub
    Partial Private Sub OnschoolYearChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LogIns = New EntitySet(Of LogIn)(AddressOf Me.attach_LogIns, AddressOf Me.detach_LogIns)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_student_id", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property student_id() As String
		Get
			Return Me._student_id
		End Get
		Set
			If (String.Equals(Me._student_id, value) = false) Then
				Me.Onstudent_idChanging(value)
				Me.SendPropertyChanging
				Me._student_id = value
				Me.SendPropertyChanged("student_id")
				Me.Onstudent_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_student_name", DbType:="NVarChar(50)")>  _
	Public Property student_name() As String
		Get
			Return Me._student_name
		End Get
		Set
			If (String.Equals(Me._student_name, value) = false) Then
				Me.Onstudent_nameChanging(value)
				Me.SendPropertyChanging
				Me._student_name = value
				Me.SendPropertyChanged("student_name")
				Me.Onstudent_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_gpa", DbType:="Float")>  _
	Public Property gpa() As System.Nullable(Of Double)
		Get
			Return Me._gpa
		End Get
		Set
			If (Me._gpa.Equals(value) = false) Then
				Me.OngpaChanging(value)
				Me.SendPropertyChanging
				Me._gpa = value
				Me.SendPropertyChanged("gpa")
				Me.OngpaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credits", DbType:="Int")>  _
	Public Property credits() As System.Nullable(Of Integer)
		Get
			Return Me._credits
		End Get
		Set
			If (Me._credits.Equals(value) = false) Then
				Me.OncreditsChanging(value)
				Me.SendPropertyChanging
				Me._credits = value
				Me.SendPropertyChanged("credits")
				Me.OncreditsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_major", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property major() As String
		Get
			Return Me._major
		End Get
		Set
			If (String.Equals(Me._major, value) = false) Then
				Me.OnmajorChanging(value)
				Me.SendPropertyChanging
				Me._major = value
				Me.SendPropertyChanged("major")
				Me.OnmajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_schoolYear", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property schoolYear() As String
		Get
			Return Me._schoolYear
		End Get
		Set
			If (String.Equals(Me._schoolYear, value) = false) Then
				Me.OnschoolYearChanging(value)
				Me.SendPropertyChanging
				Me._schoolYear = value
				Me.SendPropertyChanged("schoolYear")
				Me.OnschoolYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_LogIn", Storage:="_LogIns", ThisKey:="student_id", OtherKey:="student_id")>  _
	Public Property LogIns() As EntitySet(Of LogIn)
		Get
			Return Me._LogIns
		End Get
		Set
			Me._LogIns.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LogIns(ByVal entity As LogIn)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_LogIns(ByVal entity As LogIn)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.StudentCourse")>  _
Partial Public Class StudentCourse
	
	Private _s_course_id As Integer
	
	Private _student_id As String
	
	Private _course_id As String
	
	Private _credit As System.Nullable(Of Integer)
	
	Private _major As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_s_course_id", DbType:="Int NOT NULL")>  _
	Public Property s_course_id() As Integer
		Get
			Return Me._s_course_id
		End Get
		Set
			If ((Me._s_course_id = value)  _
						= false) Then
				Me._s_course_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_student_id", DbType:="NVarChar(50)")>  _
	Public Property student_id() As String
		Get
			Return Me._student_id
		End Get
		Set
			If (String.Equals(Me._student_id, value) = false) Then
				Me._student_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_course_id", DbType:="NVarChar(50)")>  _
	Public Property course_id() As String
		Get
			Return Me._course_id
		End Get
		Set
			If (String.Equals(Me._course_id, value) = false) Then
				Me._course_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_credit", DbType:="Int")>  _
	Public Property credit() As System.Nullable(Of Integer)
		Get
			Return Me._credit
		End Get
		Set
			If (Me._credit.Equals(value) = false) Then
				Me._credit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_major", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property major() As String
		Get
			Return Me._major
		End Get
		Set
			If (String.Equals(Me._major, value) = false) Then
				Me._major = value
			End If
		End Set
	End Property
End Class
